name: Generate Release PDF

on: 
  push:
    branches:
      - main
      - workflow
    paths-ignore:
      - '.gitignore'
      - '**.md'

env:
  TYPST_FILE_NAME: book

jobs:
  build_typst:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Set up Git repository for secondary repo
        uses: actions/checkout@v4
     
      # - name: Install jq if not present
      #   run: |
      #     if ! command -v jq &> /dev/null
      #     then
      #       echo "jq could not be found, installing..."
      #       sudo apt-get install -y jq
      #     fi
    
      # - name: Prepare directories
      #   run: |
      #     mkdir -p ./cv
      #     mkdir -p ./fonts



      # - name: Download Metadata
      #   run: |
      #     curl -s "https://fonts.google.com/download/list?family=Sarabun" > sarabun_metadata_raw.txt
      #     # Remove ")]}'" from the beginning of the file
      #     tail -c +5 sarabun_metadata_raw.txt > sarabun_metadata.json

      - name: Process and Download Fonts
        run: |
          mkdir -p cv
          # Download font
          curl -s "https://fonts.google.com/download/list?family=Noto%20Sans%20SC" > cv/noto_sans_sc_raw.txt
          # Remove ")]}'" from the beginning of the file
          tail -c +5 cv/noto_sans_sc_raw.txt > cv/noto_sans_sc_metadata.json
          # Extract the necessary information from the JSON file
          file_refs=$(jq -rc '.manifest.fileRefs[]' cv/noto_sans_sc_metadata.json)
          # Download, save the font file to ~/.fonts
          # We use temp fonts directory since curl cannot write directly to ~/.fonts
          mkdir -p fonts ~/.fonts
          while IFS= read -r file_ref; do
              filename=$(echo "$file_ref" | jq -r '.filename')
              url=$(echo "$file_ref" | jq -r '.url')
              fontname=$(basename "$filename")
              echo $url $fontname
              curl "$url" -o "fonts/$fontname"
          done <<< "$file_refs"
          ls -l fonts/
    
      # - name: Download and process font metadata
      #   run: |
      #     # Download Sarabun font metadata
      #     curl -s "https://fonts.google.com/download/list?family=Noto%20Sans%20SC" > ./cv/noto_sans_sc_raw.txt

      #     # print the first 10 lines of the file
      #     head -n 10 ./cv/noto_sans_sc_raw.txt

      #     # Remove ")]}'" from the beginning of the file
      #     tail -c +5 ./cv/noto_sans_sc_raw.txt > ./cv/noto_sans_sc_metadata.json
          
      #     # Extract the necessary information from the JSON file
      #     file_refs=$(jq -rc '.manifest.fileRefs[]' ./cv/noto_sans_sc_metadata.json)

      #     # Download, rename the font files and save to ./fonts
      #     while IFS= read -r file_ref; do
      #         filename=$(echo "$file_ref" | jq -r '.filename')
      #         url=$(echo "$file_ref" | jq -r '.url')
      #         curl -s "$url" -o "fonts/$filename"
      #     done <<< "$file_refs"

      # - name: process font metadata
      #   run: |
    
      #     rm -r ./cv
    
      #     echo "Font downloaded."
    
      # - name: List downloaded fonts
      #   run: |
      #     ls -l ./fonts/
      #     # file Noto_Sans_SC.zip
      #     # unzip -d Noto_Sans_SC/ Noto_Sans_SC.zip
      #     # mv Noto_Sans_SC/static /usr/share/fonts/
      #     # fc-cache -fv

      - name: Check Fonts Existence
        id: check-fonts
        run: |
          if [ -f "/usr/share/fonts/NotoSansSC-Regular.ttf" ]; then
            echo "Font already cached."
            echo "::set-output name=font_exists::true"
          else
            echo "No Font!"
            echo "::set-output name=font_exists::false"
          fi

      - name: Prepare Typst environment
        uses: typst-community/setup-typst@v3

      - name: Compile Typst document
        run: |
          typst fonts --variants
          typst compile ${{ env.TYPST_FILE_NAME }}.typ ${{ env.TYPST_FILE_NAME }}.pdf 

      - name: Delete old Release
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            try {
              const { data: { id } } = await github.rest.repos.getLatestRelease({ owner, repo })
              await github.rest.repos.deleteRelease({ owner, repo, release_id: id })
            } catch {}

      - name: Generate release tag
        id: tag
        run: |
          echo "::set-output name=release_tag::latest_$(date +"%Y-%m-%d_%H-%M")"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: latest version
          body: Latest version of `${{ env.TYPST_FILE_NAME }}.pdf`
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ${{ env.TYPST_FILE_NAME }}.pdf
